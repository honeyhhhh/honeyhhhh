<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zion</title>
  
  <subtitle>lsc&#39;home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zionlove.site/"/>
  <updated>2018-12-31T10:20:50.961Z</updated>
  <id>http://www.zionlove.site/</id>
  
  <author>
    <name>Zion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性表的链式存储结构（一）：单链表</title>
    <link href="http://www.zionlove.site/link/"/>
    <id>http://www.zionlove.site/link/</id>
    <published>2018-12-30T16:14:12.000Z</published>
    <updated>2018-12-31T10:20:50.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是线性表-List"><a href="#什么是线性表-List" class="headerlink" title="什么是线性表(List)"></a>什么是线性表(List)</h2><p>简单来说，就是线一样的结构<br>定义：由零个或多个数据元素组成的有序序列<br>特点：</p><ul><li>有序</li><li>有限</li><li>若将线性表记为(a1,a2.ai-1,ai,ai+1…an);则ai-1称为ai的直接前驱元素，ai+1称为ai的直接后继元素，第一个元素无前驱，最后一个元素无后继，当n=0时，称为空表。</li></ul><h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><p>粗略提一下，线性表的两种存储结构之顺序存储结构，其实跟 数组长的一毛一样，其实也不算一毛一样，这以后再说。<br>定义：用一段地址连续的存储单元依次存储线性表的数据结构</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>线性表的链式存储结构特点是用一组任意存储单元存储线性表的数据元素，这组存储单元可以在内存中未被占用的任意位置。</p><p>结点(Node):结点由两部分组成，用来存储数据元素信息的域称为数据域，存储直接后继位置的称为指针域。指针域中存储的信息称为指针或者链。</p><p>n个结点链接成的一个链表，即为线性表(a1,a2…an)的链式存储结构。</p><p>单链表:每个结点只包含一个指针域。</p><p>对于线性表来说，有头有尾，链表也不例外。链表中的第一个结点的存储位置叫做头指针，最后一个结点指针为空(NULL)。</p><h2 id="头指针和头结点的异同"><a href="#头指针和头结点的异同" class="headerlink" title="头指针和头结点的异同"></a>头指针和头结点的异同</h2><ul><li><p>头指针</p><ul><li>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</li><li>头指针具有标识作用，所以常用头指针冠以链表的名字(指针变量的名字)</li><li>头指针是链表的必要元素，无论链表是否为空，头指针均不为空。</li></ul></li><li><p>头结点</p><ul><li>头结点是为了操作统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义，但也可以用来存储链表的长度</li><li>有了头结点，对放在第一个元素结点前插入结点和删除第一个结点和其他结点的操作就统一了。没有头结点，在进行一些操作时通常要对头指针进行修改。</li><li>头结点不是链表的必要元素</li></ul></li></ul><h2 id="单链表存储结构"><a href="#单链表存储结构" class="headerlink" title="单链表存储结构"></a>单链表存储结构</h2><p>图片后面有～</p><p>假设p是指向线性表第i个元素的指针，则该结点ai的数据域可以用p-&gt;date的值表示，结点ai的指针域可以用p-&gt;next表示，p-&gt;next的值是一个指针。</p><p>p-&gt;next指向的是i+1个元素！！也就是指向ai+1的指针。</p><h2 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h2><p>用malloc函数申请堆内存时，由于所申请内存块大小不定，当使用频繁时会造成大量内存碎片，而内存池的作用就是将这些碎片保存，等到想用了在拿出来。其实free函数也是这样，free 函数选择创建一个内存池，将这些“废弃”的内存块搁在一起，等再次调用 malloc 函数申请内存的时候，先在空闲区块链表里面找找看有没有可用的内存块，有的话直接拿出来用，没有的话才申请个新的。所以好处就是能够尽量避免内存碎片，使内存分配效率得到提升。<br>下面的我将使用==单链表==来维护一个内存池，涉及到创建，插入，删除。</p><h2 id="单链表的操作-插入，删除，创建，逆置，排序"><a href="#单链表的操作-插入，删除，创建，逆置，排序" class="headerlink" title="单链表的操作:插入，删除，创建，逆置，排序"></a>单链表的操作:插入，删除，创建，逆置，排序</h2><p>不多bb，直接上代码，还有纯手工图片。<br>假设这是一个通讯录吧，<strong>!!!!下面的单链表没有头结点的!!!!</strong>,我觉得没有头结点的链表比较直观，但是在删除等操作起来确实有点麻烦。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> phone[<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pool</span> = <span class="title">NULL</span>;</span><span class="comment">//内存池创建</span></span><br><span class="line"><span class="keyword">int</span> count;<span class="comment">//默认值为0，记录个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">head</span> = <span class="title">NULL</span>;</span><span class="comment">//头指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h4><p><img src="/blog_image/touchafa.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPersion</span><span class="params">(struct contacts **head)</span><span class="comment">//传进来头指针的地址，修改头指针的指向</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">person</span>,*<span class="title">temp</span>;</span></span><br><span class="line">        <span class="keyword">if</span>(pool!=<span class="literal">NULL</span>)<span class="comment">//如果内存池不为空，则从中取出，下同</span></span><br><span class="line">        &#123;</span><br><span class="line">                person=pool;</span><br><span class="line">                pool=pool-&gt;next;</span><br><span class="line">                count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"> person = (struct contacts *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct contacts));</span><br><span class="line">                <span class="keyword">if</span> (person == <span class="literal">NULL</span>)<span class="comment">//内存分配失败</span></span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">getInput(person);<span class="comment">//再写一个函数填充信息</span></span><br><span class="line"><span class="comment">//重点！</span></span><br><span class="line"><span class="keyword">if</span>(*head != <span class="literal">NULL</span>)<span class="comment">//非空链表</span></span><br><span class="line">&#123;</span><br><span class="line">temp = *head;</span><br><span class="line">*head = person;</span><br><span class="line">person-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//空链表</span></span><br><span class="line">&#123;</span><br><span class="line">*head = person;</span><br><span class="line">person-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h4><p><img src="/blog_image/weichafa.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(struct contacts **head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">tail</span>;</span><span class="comment">//tail永远在链表尾部，需要用static静态局部变量</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">person</span>;</span></span><br><span class="line">        <span class="keyword">if</span>(pool!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                person=pool;</span><br><span class="line">                pool=pool-&gt;next;</span><br><span class="line">                count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                person = (struct contacts *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct contacts));</span><br><span class="line">                <span class="keyword">if</span> (person == <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        getInput(person);</span><br><span class="line"><span class="comment">//重点！！</span></span><br><span class="line">        <span class="keyword">if</span>(*head != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                tail-&gt;next=person;</span><br><span class="line">                person-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                *head=person;</span><br><span class="line">                person-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail=person;<span class="comment">//将插入的结点设置为新的tail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>提一下这个尾插法,仅仅适用与建立空链表。。<br>在做题过程中发现把上面的NULL换成*head，就建立了循环链表，而尾插法是不改变插入顺序的。<br>再提一下建立链表的方法吧，我看过其他的建立链表的方法，其实每个人都有自己的方法，我的也不一定是最好的，但一定是我所能理解的，还有就是有无头结点，还是那句话，适合自己的才是最好的。世界上也没有最好的算法，应尽力做到时空均衡。<br>如果要有有头结点的话，就给头指针分配一个内存空间，head-&gt;next就是第一个元素，就可以采用循环来建立链表了</p></blockquote><h4 id="单链表的遍历"><a href="#单链表的遍历" class="headerlink" title="单链表的遍历"></a>单链表的遍历</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayContacts</span><span class="params">(struct contacts *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">person</span>;</span></span><br><span class="line">        person = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (person != <span class="literal">NULL</span>)<span class="comment">//判断为空条件！！</span></span><br><span class="line">        &#123;</span><br><span class="line">                printPerson(person);<span class="comment">//再写一个函数输出信息</span></span><br><span class="line">                person=person-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的查找"><a href="#单链表的查找" class="headerlink" title="单链表的查找"></a>单链表的查找</h4><p>查找一般是为了删除和修改，修改就不说了，找到直接改。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct contacts *<span class="title">findPerson</span><span class="params">(struct contacts *head)</span><span class="comment">//返回结点指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">current</span>;</span></span><br><span class="line">        <span class="keyword">char</span> input[<span class="number">40</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,input);<span class="comment">//你所要查找的数据信息</span></span><br><span class="line">        current = head;</span><br><span class="line">        <span class="keyword">while</span> (current!=<span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(current-&gt;name, input))</span><br><span class="line">        &#123;</span><br><span class="line">                current=current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="单链表的排序"><a href="#单链表的排序" class="headerlink" title="单链表的排序"></a>单链表的排序</h4><p>排序涉及到好多排序，冒泡希尔插入选择等等，快速排序可以选择第一个元素和最后一个元素，为中间值。一旦涉及到排序就免不了交换，而这里的交换不是交换结点，而是只交换数据域，有一次我就是傻傻的把结点给交换了，却不知道里面还有个指针域。。但是我在大佬的博客看到真有<a href="https://blog.csdn.net/qq_35644234/article/details/53222603" target="_blank" rel="noopener">交换结点</a>的，值的琢磨。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(struct contacts **head)</span><span class="comment">//冒泡排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(struct contacts **head)</span><span class="comment">//选择排序</span></span></span><br></pre></td></tr></table></figure></p><p>这个暂时不会</p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><hr><p>还是得bb几句有无头结点的链表</p><ul><li>有头结点的链表：第一个结点只有指针域，该指针域存放的是指向链表下一个结点的指针(或者NULL)，该链表通过头结点标记。<br><img src="/blog_image/youtoujiedian.jpg" alt=""></li><li>无头结点的链表：第一个结点既有数据域又有指针域，是通过一个指向该链表第一个结点的指针来标记该链表的。<br><img src="/blog_image/wutoujiedian.jpg" alt=""></li></ul><p>有头结点的单链表肯定是比较好理解的，但它也会浪费一点资源。<br>无头结点就是代码有点恐怖而已，这也是我排序算法不敢写下去的原因之一，但其中的好处也是有的，比如连接两个链表<br>有头结点的链表实现了算法的统一。</p><hr><h4 id="链表的插入"><a href="#链表的插入" class="headerlink" title="链表的插入"></a>链表的插入</h4><p>思路：因为是链式结构，一环扣一环，往前走就回不去了，所以一般情况下我们得记录前一<br>个结点。。假如你要在p,p-&gt;next之间插入s，则有s-&gt;next = p-&gt;next;p-&gt;next = s;两者不可调换。<br><img src="/blog_image/charu.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertPerson</span><span class="params">(struct contacts **head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">previons</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">current</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">new</span>;</span></span><br><span class="line"><span class="comment">//new新结点</span></span><br><span class="line"><span class="keyword">while</span>(current != <span class="literal">NULL</span> &amp;&amp; (这里定位))</span><br><span class="line">&#123;</span><br><span class="line">previous = current;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span>-&gt;next = current;</span><br><span class="line"><span class="keyword">if</span>(previons = <span class="literal">NULL</span>)<span class="comment">//空链表</span></span><br><span class="line">&#123;</span><br><span class="line">*head = <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">previous-&gt;next = <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><p>思路：一般情况下，还是要记录前一个结点，但是特殊情况下比如你已经排过序了，你已经知道你要删除的是你当前结点的下一个结点，就不用那么麻烦了，这种情况就不说了，自己图一画就可以了,大概就是p-&gt;next = p-&gt;next-&gt;next;<br><img src="/blog_image/shanchu.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delPerson</span><span class="params">(struct contacts **head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">temp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> <span class="title">current</span> = *<span class="title">head</span>;</span><span class="comment">//记录当前结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contract</span> <span class="title">previous</span> = <span class="title">NULL</span>;</span><span class="comment">//记录前一个结点</span></span><br><span class="line"><span class="comment">//假设你要删除的是person结点</span></span><br><span class="line"><span class="comment">//加一个判断person是否为NULL，不是执行下面语句</span></span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">NULL</span> &amp;&amp; current != person)</span><br><span class="line">&#123;</span><br><span class="line">previous = current;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (previous == <span class="literal">NULL</span>)<span class="comment">//待删除的为第一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">*head = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">previous-&gt;next = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断内存池是否有空间，有的话把删除的结点放入内存池</span></span><br><span class="line"><span class="keyword">if</span>(count &lt; MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pool != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = pool;</span><br><span class="line">pool = person;</span><br><span class="line">person-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pool = person;</span><br><span class="line">person-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(person);<span class="comment">//直接释放</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入和删除的思想是相通的，都要经过遍历。</p></blockquote><h4 id="单链表的释放-整表删除-内存池的释放"><a href="#单链表的释放-整表删除-内存池的释放" class="headerlink" title="单链表的释放(整表删除),内存池的释放"></a>单链表的释放(整表删除),内存池的释放</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseContacts</span><span class="params">(struct contacts **head)</span><span class="comment">//内存池同理，只是参数为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">temp</span>;</span></span><br><span class="line">        <span class="keyword">while</span> (*head!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                temp=*head;</span><br><span class="line">                *head=(*head)-&gt;next;<span class="comment">//*优先级低于-&gt;</span></span><br><span class="line">                <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的逆置"><a href="#单链表的逆置" class="headerlink" title="单链表的逆置"></a>单链表的逆置</h4><p>把图画出来就就简单多了,代码简单，有么有bug我也不知道，反正是我参照别人的图自己写的。。<br><img src="/blog_image/nizhi.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invertContacts</span><span class="params">(struct contacts **head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//省去判断是否为空链表和一个元素的链表</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">contacts</span> *<span class="title">p</span>=*<span class="title">head</span>,*<span class="title">q</span>;</span><span class="comment">//p指向第一个结点</span></span><br><span class="line">        *head=<span class="literal">NULL</span>;<span class="comment">//断开头指针与第一个结点的联系</span></span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">                q=p-&gt;next;</span><br><span class="line">                p-&gt;next=*head;</span><br><span class="line">                *head=p;</span><br><span class="line">                p=q;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog_image/jieguo.jpg" alt=""></p><h2 id="单链表结构与顺序存储结构的优缺点"><a href="#单链表结构与顺序存储结构的优缺点" class="headerlink" title="单链表结构与顺序存储结构的优缺点"></a>单链表结构与顺序存储结构的优缺点</h2><ul><li>时间性能<ul><li>查找<ul><li>顺序结构O(1)</li><li>单链表O(n)</li></ul></li><li>插入和删除<ul><li>顺序结构需要平均移动表长一半的元素，时间O(n)</li><li>单链表在计算出某位置的指针后（前提），时间O(1)</li></ul></li></ul></li><li>空间性能<br>顺序结构需要与分配存储空间，而单链表不需要</li></ul><p>综上所述，各有其优缺点，对于插入和删除数据越频繁的操作，单链表的效率优势越明显。比如要从第i个位置开始插入连续10个元素，对于顺序存储结构来说每次插入都要要移动n-i个位置，每次都是O(n),而单链表，只需要在第一次找到第i个位置O(n),接下去只是简单移动指针O(1)。</p><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><p>其实你只要会画图，用你学习链表的方式画出链表，所有的问题都不算什么，多动笔</p><p><strong>如有错误，欢迎指正</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是线性表-List&quot;&gt;&lt;a href=&quot;#什么是线性表-List&quot; class=&quot;headerlink&quot; title=&quot;什么是线性表(List)&quot;&gt;&lt;/a&gt;什么是线性表(List)&lt;/h2&gt;&lt;p&gt;简单来说，就是线一样的结构&lt;br&gt;定义：由零个或多个数据元素组成
      
    
    </summary>
    
      <category term="数据结构与算法 - 线性表" scheme="http://www.zionlove.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello myblog!</title>
    <link href="http://www.zionlove.site/diary181228/"/>
    <id>http://www.zionlove.site/diary181228/</id>
    <published>2018-12-28T16:24:01.000Z</published>
    <updated>2018-12-29T06:13:26.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><blockquote class="blockquote-center"><p>人生在勤，不索何获？ </p></blockquote></h2><p>经过了五天的努力，我的博客基本搭建好了，虽然在移动端还是有一些不尽人意，但我还挺满足的，毕竟自己也不是学前端的。<br>搭这个博客我还是很纠结的，因为实际上搭博客我只花了一天，已经可以实现它的功能了，但是我想让它好看一点。爱美之心人皆有之，紧接着，我看到了许多优秀的大佬的作品，实在是非常喜欢，于是我便沉迷了。我很矛盾，因为离期末考也就十几天，然而我心里并没有底，而且我还有好多事情没干。<br>时间过的很快，一学期就要过去了，可是我早睡早起的目标依旧没有实现，我也相信这是很多人的目标，所以这也是我寒假的目标，而我现在的目标便是做好现在该做的事，具体是啥事我一时也说不会出来。<br>接下去我会找个时间记录我这几天的辛酸….<br>感觉自己过的很充实，但又害怕把时间用错地方。。。。。<br>最后，纪念一下我的生日，就在刚刚过去不久的昨天，还有过去也不久的前天（农历）哈哈哈哈哈。</p><p><img src="/blog_image/2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人生在勤，不索何获？ &lt;/p&gt;
&lt;/blockquote&gt;&lt;/h2&gt;&lt;p&gt;经过了五天的努力
      
    
    </summary>
    
      <category term="diary" scheme="http://www.zionlove.site/categories/diary/"/>
    
    
      <category term="diary" scheme="http://www.zionlove.site/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="http://www.zionlove.site/test2/"/>
    <id>http://www.zionlove.site/test2/</id>
    <published>2018-12-26T06:38:48.000Z</published>
    <updated>2018-12-26T06:45:32.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test1" scheme="http://www.zionlove.site/categories/test1/"/>
    
    
      <category term="test1" scheme="http://www.zionlove.site/tags/test1/"/>
    
      <category term="test2" scheme="http://www.zionlove.site/tags/test2/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://www.zionlove.site/test/"/>
    <id>http://www.zionlove.site/test/</id>
    <published>2018-12-26T06:29:40.000Z</published>
    <updated>2018-12-26T06:45:54.053Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="test1" scheme="http://www.zionlove.site/tags/test1/"/>
    
      <category term="test2" scheme="http://www.zionlove.site/tags/test2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.zionlove.site/hello-world/"/>
    <id>http://www.zionlove.site/hello-world/</id>
    <published>2018-12-25T06:21:10.899Z</published>
    <updated>2018-12-25T06:21:10.896Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
